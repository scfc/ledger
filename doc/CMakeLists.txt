# The following will be generated or updated when the 'doc' target is built:
#   * user guide and man pages: if BUILD_DOCS is set
#   * HTML versions of the above: if BUILD_DOCS and BUILD_WEB_DOCS are set
#   * Doxygen / reference documentation: if USE_DOXYGEN is set

########################################################################

# BUILD_WEB_DOCS implies BUILD_DOCS
if (BUILD_WEB_DOCS)
  set(BUILD_DOCS 1)
endif()

if (BUILD_A4_PDF)
  set(papersize --texinfo=@afourpaper)
endif()

if (BUILD_DOCS)
  set(ledger_info_files ledger3.texi)

  find_program(MAKEINFO makeinfo)
  if (NOT MAKEINFO)
    message(WARNING "Could not find makeinfo. Info version of documentation cannot be built.")
  endif()

  find_program(TEXI2PDF texi2pdf)
  find_program(TEX tex)
  if (NOT TEXI2PDF AND NOT TEX)
    message(WARNING "Could not find texi2pdf or tex. PDF version of documentation cannot not be built.")
  endif()
endif()

if (BUILD_WEB_DOCS)
  find_program(MAN2HTML man2html)
  find_program(GROFF groff)
  set(ledger_info_files ledger3.texi)
  if (NOT MAN2HTML AND NOT GROFF)
    message(WARNING "Could not find man2html or groff. HTML version of manpage cannot be built.")
  endif()
endif()

if (USE_DOXYGEN)
  find_package(Doxygen)
  if (NOT DOXYGEN_FOUND)
    message(WARNING "Could not find doxygen. Reference documentation cannot be built.")
  endif()
endif()

########################################################################

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/version.texi.in
  ${CMAKE_CURRENT_BINARY_DIR}/version.texi)

foreach(file ${ledger_info_files})
  get_filename_component(file_base ${file} NAME_WE)

  if (MAKEINFO)
    add_custom_command(OUTPUT ${file_base}.info
      COMMAND makeinfo --force --no-split -o ${file_base}.info ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      COMMENT "Generating ${file_base} info manual"
      VERBATIM)
    list(APPEND ledger_doc_files ${file_base}.info)
  endif()

  if (BUILD_WEB_DOCS AND MAKEINFO)
    add_custom_command(OUTPUT ${file_base}.html
      COMMAND makeinfo --force --html --no-split -o ${file_base}.html ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      COMMENT "Generating ${file_base} html manual"
      VERBATIM)
    list(APPEND ledger_doc_files ${file_base}.html)
  endif()

  if (BUILD_WEB_DOCS AND TEXI2PDF AND TEX)
    add_custom_command(OUTPUT ${file_base}.pdf
      COMMAND texi2pdf ${papersize} -b -q -o ${file_base}.pdf ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}
      COMMENT "Generating ${file_base} pdf manual"
      VERBATIM)
    list(APPEND ledger_doc_files ${file_base}.pdf)
  endif()
endforeach()

########################################################################

if (BUILD_WEB_DOCS)
  include(FindUnixCommands)
  if (NOT BASH)
    message(FATAL_ERROR "Could not find bash. Unable to build web documentation.")
  endif()

  if (MAN2HTML)
    add_custom_command(OUTPUT ledger.1.html
      COMMAND ${BASH} -c "man2html ${CMAKE_CURRENT_SOURCE_DIR}/ledger.1 | tail -n+3 > ledger.1.html"
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/ledger.1
      COMMENT "Generating html manpage"
      VERBATIM)
    list(APPEND ledger_doc_files ledger.1.html)
  elseif(GROFF)
    add_custom_command(OUTPUT ledger.1.html
      COMMAND ${BASH} -c "groff -mandoc -Thtml ${CMAKE_CURRENT_SOURCE_DIR}/ledger.1 > ledger.1.html"
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/ledger.1
      COMMENT "Generating html manpage"
      VERBATIM)
    list(APPEND ledger_doc_files ledger.1.html)
  endif()
endif(BUILD_WEB_DOCS)

########################################################################

if (USE_DOXYGEN)
  configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in
    ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    @ONLY)

  # see INPUT/FILE_PATTERNS in Doxyfile.in
  file(GLOB doxygen_input_files ${CMAKE_SOURCE_DIR}/src/*.h)

  add_custom_command(OUTPUT html/index.html
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile ${doxygen_input_files}
    COMMENT "Building doxygen documentation")
  add_custom_target(doc.doxygen DEPENDS html/index.html)
else()
  add_custom_target(doc.doxygen)
endif()

add_custom_target(doc DEPENDS ${ledger_doc_files} doc.doxygen)

########################################################################

include(GNUInstallDirs)

if (CMAKE_INSTALL_MANDIR)
  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/ledger.1
    DESTINATION ${CMAKE_INSTALL_MANDIR}/man1
    COMPONENT doc)
endif(CMAKE_INSTALL_MANDIR)

foreach(file ${ledger_doc_files})
  get_filename_component(file_ext ${file} EXT)

  if(file_ext STREQUAL ".info")
    if(CMAKE_INSTALL_INFODIR)
      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${file}
        DESTINATION ${CMAKE_INSTALL_INFODIR}
        COMPONENT doc)
    endif()
  elseif(CMAKE_INSTALL_DOCDIR)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${file}
      DESTINATION ${CMAKE_INSTALL_DOCDIR}
      COMPONENT doc)
  endif()
endforeach()
