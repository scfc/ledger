# NOTE: Please validate this file after editing it using
#       Travis WebLint https://lint.travis-ci.org/
#       or travis-lint https://github.com/travis-ci/travis-lint

language: cpp
compiler:
  - gcc
  - clang
os:
  - linux
  - osx
services:
  - docker
sudo: false
cache:
  apt: true

env:
  global:
      # Boost version to use:
      # _MIN is used when building the master branch
      # _MAX is used when building any other branch
    - BOOST_VERSION_MIN="1.49.0"
    - BOOST_VERSION_MAX="1.61.0"
      # List of required boost libraries to build
    - BOOST_LIBS="date_time,filesystem,iostreams,python,regex,system,test"
      # List of required Homebrew formulae to install
    - BREWS="gmp,mpfr"
      # Encrypted COVERITY_SCAN_TOKEN
    - secure: "mYNxD1B8WNSvUeKzInehZ7syi2g1jH2ymeSQxoeKKD2duq3pvNWPdZdc4o9MlWQcAqcz58rhFZRIpuEWCnP0LbbJaG+MyuemMn9uAmg9Y4gFpMsBPHuTdf8pO3rDex+tkrr9puEJFgL+QV/TehxO6NDDpx7UdYvJb+4aZD/auYI="
  matrix:
    - DOCKERIMAGE= PACKAGES=''
    - DOCKERIMAGE=fedora:28 PACKAGES='boost-devel boost-python-devel cmake gcc gcc-c++ gettext-devel gmp-devel libedit-devel make mpfr-devel python2-devel utf8cpp-devel'
    - DOCKERIMAGE=fedora:29 PACKAGES='boost-devel boost-python2-devel cmake gcc gcc-c++ gettext-devel gmp-devel libedit-devel make mpfr-devel python2-devel utf8cpp-devel'
    - DOCKERIMAGE=fedora:rawhide PACKAGES='boost-devel boost-python2-devel cmake gcc gcc-c++ gettext-devel gmp-devel libedit-devel make mpfr-devel python2-devel utf8cpp-devel'


matrix:
  exclude:
    - os: linux
      compiler: clang
      # Compiling ledger on Linux with clang
      # either crashes clang or results in a ledger binary that crashes with SIGSEGV.
    - os: osx
      compiler: gcc
      # On macOS building ledger with GNU GCC 4.8 fails due to
      # undefined symbols, maybe because boost was not being built with g++-4.8.
      # Undefined symbols for architecture x86_64:
      # "boost::re_detail::perl_matcher<char const*, std::allocator<boost::sub_match<char const*> >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::construct_init(boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > const&, boost::regex_constants::_match_flags)", referenced from:
      #     boost::re_detail::perl_matcher<char const*, std::allocator<boost::sub_match<char const*> >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::perl_matcher(char const*, char const*, boost::match_results<char const*, std::allocator<boost::sub_match<char const*> > >&, boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > const&, boost::regex_constants::_match_flags, char const*) in main.cc.o
      #     boost::re_detail::perl_matcher<char const*, std::allocator<boost::sub_match<char const*> >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::perl_matcher(char const*, char const*, boost::match_results<char const*, std::allocator<boost::sub_match<char const*> > >&, boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > const&, boost::regex_constants::_match_flags, char const*) in global.cc.o
      # "boost::re_detail::perl_matcher<char const*, std::allocator<boost::sub_match<char const*> >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::find()", referenced from:
      #     bool boost::regex_search<char const*, char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >(char const*, char const*, boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > const&, boost::regex_constants::_match_flags) in main.cc.o
      #     bool boost::regex_search<char const*, char, boost::regex_traits<char, boost::cpp_regex_traits<char> > >(char const*, char const*, boost::basic_regex<char, boost::regex_traits<char, boost::cpp_regex_traits<char> > > const&, boost::regex_constants::_match_flags) in global.cc.o
    - os: osx
      compiler: clang
      # On macOS building ledger with clang fails due to
      # dyld: Library not loaded: libboost_python.dylib
      #   Referenced from: /Users/travis/build/ledger/ledger/ledger
      #   Reason: image not found

addons:
  coverity_scan:
    project:
      name: "ledger/ledger"
      description: "Build submitted via Travis CI"
    build_command_prepend: "cmake . -DUSE_PYTHON=ON -DBUILD_DEBUG=ON -DCLANG_GCOV=ON"
    build_command: "make"
    branch_pattern: coverity
  apt:
    sources:
      #- boost-latest
    packages:
      - libgmp-dev
      - libmpfr-dev
      - libedit-dev
      #- libboost1.55-dev
      #- libboost-test1.55-dev
      #- libboost-regex1.55-dev
      #- libboost-python1.55-dev
      #- libboost-system1.55-dev
      #- libboost-date-time1.55-dev
      #- libboost-iostreams1.55-dev
      #- libboost-filesystem1.55-dev
      #- libboost-serialization1.55-dev

before_install:
  # - if [ "${TRAVIS_BRANCH}" = "master" ]; then export BOOST_VERSION="${BOOST_VERSION_MIN}"; else export BOOST_VERSION="${BOOST_VERSION_MAX}"; fi
  - export BOOST_VERSION="${BOOST_VERSION_MAX}"
  - if [ -n "${BOOST_VERSION}" ]; then export BOOST_ROOT="${TRAVIS_BUILD_DIR}/../boost-trunk"; export CMAKE_MODULE_PATH="${BOOST_ROOT}"; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then export DYLD_LIBRARY_PATH="${BOOST_ROOT}/lib"; fi
    # c++ is a symlink to clang++, but the compiler behaves differently when invoked as c++
  - if [ "${TRAVIS_OS_NAME}" = "osx" -a "${CXX}" = "clang++" ]; then export CXX="$(which c++)"; export CC="$(which cc)"; fi
  - tools/travis-before_install.sh

install:
  - tools/travis-install.sh

before_script:
  - if [ -z "${DOCKERIMAGE}" ]; then cmake . -DUSE_PYTHON=ON -DBUILD_DEBUG=ON; fi
  - if [ -z "${DOCKERIMAGE}" ]; then make; fi

script:
  - if [ -z "${DOCKERIMAGE}" ]; then ctest --output-on-failure; fi
  - if [ -z "${DOCKERIMAGE}" ]; then PYTHONPATH=. python python/demo.py; fi
  # TODO: The values for *FLAGS and the invocation of cmake come from
  # cmake-rpm-macros's /usr/lib/rpm/macros.d/macros.cmake, the values
  # for PACKAGES from Fedora's ledger.spec.  To avoid bitrot, it would
  # make sense to (for starters) expand *FLAGS dynamically and/or
  # clone https://src.fedoraproject.org/rpms/ledger.git, check out the
  # relevant branch and then run fedpkg local.
  - if [ -n "${DOCKERIMAGE}" ]; then docker run -v `pwd`:/src/ledger:rw "${DOCKERIMAGE}" /bin/bash -c "cd /src/ledger && dnf install -y $PACKAGES && export CFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' CXXFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' FFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -I/usr/lib64/gfortran/modules}' FCFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -I/usr/lib64/gfortran/modules' LDFLAGS='-Wl,-z,relro  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld' && /usr/bin/cmake -DCMAKE_C_FLAGS_RELEASE:STRING='-DNDEBUG' -DCMAKE_CXX_FLAGS_RELEASE:STRING='-DNDEBUG' -DCMAKE_Fortran_FLAGS_RELEASE:STRING='-DNDEBUG' -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_INSTALL_PREFIX:PATH=/usr -DINCLUDE_INSTALL_DIR:PATH=/usr/include -DLIB_INSTALL_DIR:PATH=/usr/lib64 -DSYSCONF_INSTALL_DIR:PATH=/etc -DSHARE_INSTALL_PREFIX:PATH=/usr/share -DLIB_SUFFIX=64 -DBUILD_SHARED_LIBS:BOOL=ON . -DUSE_PYTHON:BOOL=ON -DUSE_DOXYGEN:BOOL=OFF -DBUILD_WEB_DOCS:BOOL=OFF && make && CTEST_OUTPUT_ON_FAILURE=1 make check"; fi


after_script:
  # These scripts are run for informational purposes and
  # should be reintegrated into CTest once they reliably verify the documentation.
  - if [ -z "${DOCKERIMAGE}" ]; then python test/CheckTexinfo.py -l ledger -s .; fi
  - if [ -z "${DOCKERIMAGE}" ]; then python test/CheckManpage.py -l ledger -s .; fi

notifications:
  email:
    on_success: change
    on_failure: change
  irc:
    channels: [ "chat.freenode.net#ledger" ]
    on_success: change
    on_failure: change
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/0050d91909a8cde39e35
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always

